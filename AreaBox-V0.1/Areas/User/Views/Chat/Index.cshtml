@inject UserManager<ApplicationUser> _userManager


@{
	var user = await _userManager.GetUserAsync(User);
	ViewData["Title"] = "Chat";
}


<div class="row justify-content-center">
	<div class="col-lg-8 col-sm-12 order-lg-1 order-sm-2 order-2 px-lg-4 px-xl-7 ">
		<div id="post-container" class="">
			@Html.Partial("_ChatPartial")
		</div>
		<div id="loading-indicator" class="my-5" style="display: none;">
			<div class="spinner-border text-primary"></div>
		</div>
	</div>
	<div class="col-lg-4 col-sm-12 order-lg-2 order-sm-1 order-1  mb-4">
		<div class="make-me-sticky">
			<partial name="../Shared/_FilteringandUserControlPartial.cshtml" />
		</div>

	</div>
</div>
@section Scripts {

    <script src="~/js/setlocationname.js"></script>
    <script src="~/js/refreshchatpage.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.12/signalr.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		if (navigator.geolocation) {
			navigator.geolocation.getCurrentPosition(function (position) {
				const latitude = position.coords.latitude;
				const longitude = position.coords.longitude;

				$.ajax({
					url: `/Chat/GetGeolocation`,
					type: 'GET',
					data: { latitude, longitude },
					success: function (response) {
						const geolocationInfo = JSON.parse(response);
						const hiddenInput = document.createElement("input");

						hiddenInput.type = "hidden";
						hiddenInput.id = "hiddenCityID";
						hiddenInput.value = geolocationInfo.Key;
						hiddenInput.setAttribute("data-userid", "@user.Id");
						document.body.appendChild(hiddenInput);

					},
					error: function (error) {
						console.error('Error fetching geolocation details:', error);
						$('#loadingPlaceholder').hide();
					}
				});
			});
		} else {
			console.error("Geolocation is not supported by this browser.");
		}
	});

</script>

<script>
	const connection = new signalR.HubConnectionBuilder()
		.withUrl("/chathub")
		.withAutomaticReconnect()
		.configureLogging(signalR.LogLevel.Information)
		.build();


	function scrollToBottom() {
		const chatContainer = document.querySelector(".card-body.scrollable");
		chatContainer.scrollTop = chatContainer.scrollHeight;
	}

	connection.on("ReceiveMessage", (userId, userName, userImage, message, time) => {
		const chatBubbles = document.querySelector(".chat-bubbles");
		const chatItem = document.createElement("div");
		const hiddenInput = document.getElementById('hiddenCityID');

		const cuserId = hiddenInput.getAttribute('data-userid');
		chatItem.className = "chat-item";

		const currentUserId = cuserId;

		const isCurrentUser = userId === currentUserId;

		const alignmentClass = isCurrentUser ? "justify-content-start" : "justify-content-end";
		const bubbleClass = isCurrentUser ? "bg-primary text-white" : "bg-light";
		let chatBubble = ``;

		if (isCurrentUser) {
			chatBubble = `
				<div class="row align-items-end ${alignmentClass}">
						<div class="col-auto d-flex align-items-center justify-content-center">
							<span class="avatar" style="background-image: url(${userImage});"></span>
					</div>
					<div class="col col-lg-6">
						<div class="chat-bubble ${bubbleClass}">
							<div class="chat-bubble-title">
								<div class="row">
									<div class="col chat-bubble-author">${userName}</div>
									<div class="col-auto chat-bubble-date">${new Date(time).toLocaleTimeString()}</div>
								</div>
							</div>
							<div class="chat-bubble-body">
								<p>${message}</p>
							</div>
						</div>
					</div>
				</div>
			`;
		}
		else {
			chatBubble = `
					<div class="row align-items-end ${alignmentClass}">
						<div class="col col-lg-6">
							<div class="chat-bubble ${bubbleClass}">
								<div class="chat-bubble-title">
									<div class="row">
										<div class="col chat-bubble-author">${userName}</div>
										<div class="col-auto chat-bubble-date">${new Date(time).toLocaleTimeString()}</div>
									</div>
								</div>
								<div class="chat-bubble-body">
									<p>${message}</p>
								</div>
							</div>
						</div>
						<div class="col-auto">
							<span class="avatar" style="background-image: url('${userImage}');"></span>
						</div>
					</div>
				`;
		}

		chatItem.innerHTML = chatBubble;
		chatBubbles.appendChild(chatItem);
		scrollToBottom();

	});

	connection.start().catch(err => console.error(err));

	function sendMessage() {
		let cityInput = document.getElementById('hiddenCityID');
		let city = cityInput.value;

		const messageInput = document.getElementById("messageInput");
		const message = messageInput.value;
		const time = Date.now();

		connection.invoke("JoinCityGroup", city).catch(err => console.error(err));

		connection.invoke("SendMessage", message, city, time).catch(err => console.error(err));

		messageInput.value = "";

	}

	function handleEnter(event) {
		if (event.keyCode === 13) {
			sendMessage();
		}
	}

	window.addEventListener('beforeunload', () => {
		const cityInput = document.getElementById('hiddenCityID');
		const city = cityInput.value;

		connection.invoke("LeaveCityGroup", city).catch(err => console.error(err));
	});
</script>
}